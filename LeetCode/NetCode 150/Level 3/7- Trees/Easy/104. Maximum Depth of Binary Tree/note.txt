The used Data Structure:
  Trees.
  Time And Space Complexity:
    My Solution:
      Time Complexity value is O(n).
      Space Complexity value is: 
        O(log n) for a Balanced Tree -Average case-.
        O(n) for a Skewed Tree -Worst case-.
    Neetcode BFS Queue Solution:
      Time Complexity value is O(n).
      Space Complexity value is: 
        O(log n) for a Balanced Tree, i believe.
        O(1) for a Skewed Tree.
    Neetcode Iterative DFS Solution:
      Time Complexity value is O(n).
      Space Complexity value is: 
        O(log n) for a Balanced Tree, i believe.
        O(1) for a Skewed Tree.
    Neetcode Recursive DFS Solution:
      Time Complexity value is O(n).
      Space Complexity value is: 
        O(log n) for a Balanced Tree -Average case-.
        O(n) for a Skewed Tree -Worst case-.
  Takeaway:
    In BFS/DFS process we can face the situation of having different nodes level in our DS.
      Usually a Queue/Stack DS.
      If you care about a specific kind of data for each level or node: 
        Think about store it with the node in the DS.
      Example:
        ./Solutions/Neetcode Solutions/neetcode-iterative-dfs-stack-solution.js
    As a sign of tree end you can check the two pointers of the current node, and that's fine.
      But it may be better to check the node itself if it's null and avoid checking for 2 pointers.
        Always try to see if you can do the previous technique, it can make your life much easier.